import { motion, useInView } from "framer-motion";
import { useRef } from "react";

function AnimatedPhone() {
  const sectionRef = useRef(null);
  const isInView = useInView(sectionRef, { once: true, margin: "-100px" });

  // Animation variants for different parts
  const phoneVariants = {
    hidden: {
      scale: 0.8,
      opacity: 0,
      rotateY: -90,
    },
    visible: {
      scale: 1,
      opacity: 1,
      rotateY: 0,
      transition: {
        duration: 1.2,
        type: "spring",
        stiffness: 100,
      },
    },
    floating: {
      y: [0, -20, 0],
      rotateZ: [0, 2, -2, 0],
      transition: {
        duration: 4,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  const screenVariants = {
    hidden: { fill: "#F2F2F2" },
    visible: {
      fill: [
        "#daaf85", // Warm beige blend
        "#d46c42", // Rich orange-red
        "#999e55", // Earthy olive green
        "#dfa425", // Golden amber
        "#daaf85", // Back to warm beige
      ],
      transition: {
        duration: 3,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  const buttonVariants = {
    hidden: { scale: 0 },
    visible: {
      scale: [0, 1.2, 1],
      transition: {
        duration: 0.8,
        delay: 1.5,
        type: "spring",
        stiffness: 200,
      },
    },
    pulse: {
      scale: [1, 1.1, 1],
      transition: {
        duration: 2,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  return (
    <motion.div
      ref={sectionRef}
      className="flex items-center justify-center w-full h-full"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
    >
      <motion.svg
        width="382"
        height="706"
        viewBox="0 0 382 706"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        variants={phoneVariants}
        initial="hidden"
        animate={isInView ? ["visible", "floating"] : "hidden"}
        className="w-full h-auto max-w-sm drop-shadow-2xl" // Add responsive sizing
      >
        {/* Shadow/Blur Effect */}
        <g filter="url(#filter0_f_311_105)">
          <motion.rect
            width="283"
            height="573"
            rx="51"
            transform="matrix(0.951057 -0.309017 0.0165799 0.999863 36 110.237)"
            fill="black"
            fillOpacity="0.29"
            initial={{ opacity: 0 }}
            animate={isInView ? { opacity: 0.29 } : { opacity: 0 }}
            transition={{ duration: 1, delay: 0.5 }}
          />
        </g>

        {/* Phone Body - Outer */}
        <motion.path
          d="M83.8447 161.231C83.3777 133.068 101.712 96.9412 128.5 88.2373L302.501 33.7372C329.289 25.0332 366.034 35.0748 366.501 63.2374L360.803 544.714C361.27 572.877 339.932 602.763 313.144 611.467L140.5 673.737C113.712 682.441 92.1208 660.329 91.6538 632.166L83.8447 161.231Z"
          fill="#3B2525"
          // initial={{ pathLength: 0 }}
          // animate={isInView ? { pathLength: 1 } : { pathLength: 0 }}
          // transition={{ duration: 1.5, delay: 0.3 }}
        />

        {/* Phone Body - Inner */}
        <motion.path
          d="M373.822 158.068L370.826 159.041L369.397 72.8559C369.178 59.6264 363.969 48.563 354.916 42.0994C345.862 35.6358 333.707 34.3015 321.123 38.39L147.447 94.8207C134.864 98.9095 122.882 108.086 114.139 120.332C105.396 132.578 100.608 146.89 100.827 160.12L108.667 632.931C108.887 646.161 114.096 657.224 123.149 663.688C132.202 670.151 144.358 671.485 156.942 667.397L330.618 610.966C343.202 606.877 355.183 597.7 363.926 585.455C372.669 573.209 377.457 558.897 377.238 545.667L371.844 220.381L374.84 219.408L373.822 158.068Z"
          fill="#090814"
          // initial={{ scale: 0.8, opacity: 0 }}
          // animate={
          //   isInView ? { scale: 1, opacity: 1 } : { scale: 0.8, opacity: 0 }
          // }
          // transition={{
          //   duration: 1,
          //   delay: 0.6,
          //   type: "spring",
          //   stiffness: 150,
          // }}
        />

        {/* Phone Screen - White Background */}
        <motion.path
          d="M323.261 50.7457L300.594 58.1105C301.682 60.4593 302.128 63.2461 301.894 66.2251C301.66 69.2042 300.753 72.2842 299.252 75.1937C297.752 78.1031 295.704 80.7527 293.29 82.9089C290.876 85.0652 288.169 86.6619 285.408 87.5583L185.903 119.889C183.142 120.787 180.412 120.957 177.952 120.384C175.493 119.812 173.38 118.514 171.799 116.606C170.219 114.697 169.22 112.237 168.89 109.441C168.56 106.645 168.91 103.599 169.908 100.573L148.74 107.451C139.342 110.504 130.395 117.357 123.866 126.502C117.337 135.648 113.761 146.336 113.924 156.215L121.753 628.336C121.917 638.215 125.807 646.477 132.568 651.304C139.328 656.131 148.405 657.127 157.802 654.074L332.32 597.37C341.717 594.317 350.665 587.464 357.194 578.318C363.723 569.173 367.299 558.485 367.135 548.606L359.306 76.4857C359.143 66.6067 355.253 58.345 348.493 53.5179C341.733 48.6908 332.657 47.6935 323.261 50.7457Z"
          fill="white"
          // initial={{ opacity: 0 }}
          // animate={isInView ? { opacity: 1 } : { opacity: 0 }}
          // transition={{ duration: 0.8, delay: 1 }}
        />

        {/* Main Screen Area - Color Changing */}
        <motion.path
          d="M298.432 179.468L136.557 232.064C135.053 232.553 133.855 234.231 133.881 235.812L135.368 325.478C135.395 327.06 136.635 327.945 138.139 327.457L300.014 274.86C301.518 274.372 302.716 272.694 302.69 271.112L301.203 181.446C301.176 179.865 299.936 178.979 298.432 179.468Z"
          variants={screenVariants}
          initial="hidden"
          animate={isInView ? "visible" : "hidden"}
        />

        {/* Home Button */}
        <motion.path
          d="M153.417 147.035C157.524 145.7 161.56 145.676 165.015 146.966C168.469 148.255 171.187 150.799 172.825 154.278C174.463 157.756 174.947 162.012 174.216 166.507C173.485 171.002 171.572 175.534 168.718 179.531C165.865 183.528 162.199 186.809 158.185 188.96C154.171 191.111 149.989 192.035 146.167 191.616C142.346 191.196 139.056 189.452 136.715 186.604C134.374 183.755 133.086 179.93 133.014 175.612C132.918 169.822 135.014 163.559 138.84 158.2C142.667 152.84 147.91 148.824 153.417 147.035Z"
          fill="#D09951"
          variants={buttonVariants}
          initial="hidden"
          animate={isInView ? ["visible", "pulse"] : "hidden"}
        />

        {/* Screen Elements - Staggered Animation */}
        {[
          "M294.184 112.091L338.437 97.7126C339.159 97.4779 339.857 97.5545 340.377 97.9254C340.896 98.2964 341.195 98.9314 341.208 99.6907L341.457 114.722C341.47 115.481 341.195 116.302 340.693 117.005C340.191 117.708 339.504 118.235 338.781 118.469L294.528 132.848C293.806 133.083 293.108 133.006 292.589 132.635C292.069 132.264 291.77 131.629 291.758 130.87L291.508 115.839C291.496 115.08 291.771 114.258 292.272 113.555C292.774 112.853 293.462 112.326 294.184 112.091Z",
          "M138.854 362.613L182.426 348.455C183.149 348.221 183.846 348.297 184.366 348.668C184.885 349.039 185.184 349.674 185.197 350.433L185.434 364.748C185.447 365.508 185.172 366.329 184.67 367.032C184.169 367.735 183.481 368.262 182.759 368.496L139.186 382.654C138.464 382.888 137.767 382.812 137.247 382.441C136.727 382.07 136.428 381.435 136.416 380.676L136.178 366.361C136.166 365.601 136.441 364.78 136.942 364.077C137.444 363.374 138.132 362.847 138.854 362.613Z",
          "M198.085 343.367L241.657 329.21C242.379 328.975 243.077 329.052 243.596 329.423C244.116 329.794 244.415 330.429 244.427 331.188L244.665 345.503C244.677 346.262 244.403 347.084 243.901 347.787C243.399 348.489 242.711 349.016 241.989 349.251L198.417 363.408C197.695 363.643 196.997 363.566 196.477 363.195C195.958 362.824 195.659 362.189 195.646 361.43L195.409 347.115C195.396 346.356 195.671 345.534 196.173 344.831C196.675 344.128 197.362 343.602 198.085 343.367Z",
          "M216.085 562.037L272.592 543.677C273.315 543.442 274.012 543.518 274.532 543.889C275.051 544.26 275.35 544.895 275.363 545.655L276.051 587.168C276.064 587.928 275.789 588.749 275.287 589.452C274.786 590.155 274.098 590.682 273.376 590.916L216.868 609.277C216.146 609.511 215.448 609.435 214.928 609.064C214.409 608.693 214.11 608.058 214.097 607.299L213.409 565.785C213.396 565.026 213.671 564.204 214.173 563.501C214.675 562.798 215.362 562.272 216.085 562.037Z",
          "M288.251 538.588L345.439 520.007C346.161 519.772 346.859 519.849 347.379 520.22C347.898 520.59 348.197 521.225 348.21 521.985L348.898 563.498C348.911 564.258 348.636 565.079 348.134 565.782C347.632 566.485 346.945 567.012 346.222 567.246L289.034 585.828C288.312 586.063 287.614 585.986 287.094 585.615C286.575 585.244 286.276 584.609 286.263 583.85L285.575 542.336C285.562 541.577 285.837 540.755 286.339 540.053C286.841 539.35 287.528 538.823 288.251 538.588Z",
          "M142.557 585.928L199.746 567.346C200.468 567.111 201.166 567.188 201.685 567.559C202.205 567.93 202.504 568.565 202.516 569.324L203.205 610.838C203.217 611.597 202.943 612.419 202.441 613.121C201.939 613.824 201.251 614.351 200.529 614.586L143.341 633.167C142.618 633.402 141.921 633.325 141.401 632.954C140.881 632.583 140.582 631.949 140.57 631.189L139.881 589.676C139.869 588.916 140.144 588.095 140.646 587.392C141.147 586.689 141.835 586.162 142.557 585.928Z",
        ].map((path, index) => (
          <motion.path
            key={index}
            d={path}
            fill="#E6E6E6"
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{
              duration: 0.6,
              delay: 1.5 + index * 0.1,
              type: "spring",
              stiffness: 150,
            }}
          />
        ))}
        {[
          "M216.085 562.037L272.592 543.677C273.315 543.442 274.012 543.518 274.532 543.889C275.051 544.26 275.35 544.895 275.363 545.655L276.051 587.168C276.064 587.928 275.789 588.749 275.287 589.452C274.786 590.155 274.098 590.682 273.376 590.916L216.868 609.277C216.146 609.511 215.448 609.435 214.928 609.064C214.409 608.693 214.11 608.058 214.097 607.299L213.409 565.785C213.396 565.026 213.671 564.204 214.173 563.501C214.675 562.798 215.362 562.272 216.085 562.037Z",
          "M288.251 538.588L345.439 520.007C346.161 519.772 346.859 519.849 347.379 520.22C347.898 520.59 348.197 521.225 348.21 521.985L348.898 563.498C348.911 564.258 348.636 565.079 348.134 565.782C347.632 566.485 346.945 567.012 346.222 567.246L289.034 585.828C288.312 586.063 287.614 585.986 287.094 585.615C286.575 585.244 286.276 584.609 286.263 583.85L285.575 542.336C285.562 541.577 285.837 540.755 286.339 540.053C286.841 539.35 287.528 538.823 288.251 538.588Z",
          "M142.557 585.928L199.746 567.346C200.468 567.111 201.166 567.188 201.685 567.559C202.205 567.930 202.504 568.565 202.516 569.324L203.205 610.838C203.217 611.597 202.943 612.419 202.441 613.121C201.939 613.824 201.251 614.351 200.529 614.586L143.341 633.167C142.618 633.402 141.921 633.325 141.401 632.954C140.881 632.583 140.582 631.949 140.57 631.189L139.881 589.676C139.869 588.916 140.144 588.095 140.646 587.392C141.147 586.689 141.835 586.162 142.557 585.928Z",
        ].map((path, index) => (
          <motion.path
            key={index}
            d={path}
            initial={{ opacity: 0, y: 20 }}
            animate={
              isInView
                ? {
                    opacity: 1,
                    y: 0,
                    fill: [
                      "#ca823d", // Your primary color
                      "#d4a85f", // Lighter golden
                      "#e0b46f", // Warm tan
                      "#eac87a", // Golden beige
                      "#f1e6ae", // Light cream
                      "#eac87a", // Golden beige
                      "#e0b46f", // Warm tan
                      "#d4a85f", // Lighter golden
                      "#ca823d", // Back to primary
                    ],
                  }
                : { opacity: 0, y: 20 }
            }
            transition={{
              // Entrance animation
              opacity: { duration: 0.6, delay: 1.5 + index * 0.1 },
              y: {
                duration: 0.6,
                delay: 1.5 + index * 0.1,
                type: "spring",
                stiffness: 150,
              },
              // Color animation with staggered delays
              fill: {
                duration: 3,
                repeat: Infinity,
                ease: "easeInOut",
                delay: index * 0.5, // Each path starts at different time
              },
            }}
          />
        ))}

        {/* Large Content Area */}
        <motion.path
          d="M139.409 404.042L342.073 338.193C342.795 337.958 343.492 338.035 344.012 338.406C344.532 338.777 344.831 339.412 344.843 340.171L347.427 495.976C347.439 496.735 347.165 497.556 346.663 498.259C346.161 498.962 345.473 499.489 344.751 499.723L142.087 565.573C141.365 565.807 140.667 565.731 140.148 565.36C139.628 564.989 139.329 564.354 139.317 563.595L136.733 407.79C136.72 407.031 136.995 406.209 137.497 405.507C137.999 404.804 138.687 404.277 139.409 404.042Z"
          fill="#F2F2F2"
          initial={{ scaleY: 0, opacity: 0 }}
          animate={
            isInView ? { scaleY: 1, opacity: 1 } : { scaleY: 0, opacity: 0 }
          }
          transition={{
            duration: 1,
            delay: 0.5,
            type: "spring",
            stiffness: 120,
          }}
          style={{ originY: 0.5 }}
        />

        {/* Profile Circle - Special Animation */}
        <motion.rect
          width="115.361"
          height="115.971"
          rx="57.6807"
          transform="matrix(0.951057 -0.309017 0.00877784 1.00236 191.531 411.461)"
          fill="url(#pattern0_311_105)"
          initial={{ scale: 0, rotate: 180 }}
          animate={
            isInView ? { scale: 1, rotate: 0 } : { scale: 0, rotate: 180 }
          }
          transition={{
            duration: 1.2,
            delay: 2.2,
            type: "spring",
            stiffness: 200,
          }}
        />

        {/* Filter Definitions */}
        <defs>
          <filter
            id="filter0_f_311_105"
            x="0.837891"
            y="0.151367"
            width="348.973"
            height="705.641"
            filterUnits="userSpaceOnUse"
            colorInterpolationFilters="sRGB"
          >
            <feFlood floodOpacity="0" result="BackgroundImageFix" />
            <feBlend
              mode="normal"
              in="SourceGraphic"
              in2="BackgroundImageFix"
              result="shape"
            />
            <feGaussianBlur
              stdDeviation="18"
              result="effect1_foregroundBlur_311_105"
            />
          </filter>
          <pattern
            id="pattern0_311_105"
            patternContentUnits="objectBoundingBox"
            width="1"
            height="1"
          >
            <use
              xlinkHref="#image0_311_105"
              transform="matrix(0.00106045 0 0 0.00105485 -0.171792 -0.157173)"
            />
          </pattern>
        </defs>
      </motion.svg>
    </motion.div>
  );
}

export default AnimatedPhone;
